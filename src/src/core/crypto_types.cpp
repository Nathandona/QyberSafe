#include "qybersafe/core/crypto_types.h"
#include <string>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <cstring>
#include <atomic>
#include <memory>
#include <stdexcept>

namespace qybersafe::core {

// Implementation of Result template methods will be generated by the compiler
// since they are defined in the header as templates.

// Utility functions for working with bytes
std::string bytes_to_hex(const bytes& data) {
    std::stringstream ss;
    ss << std::hex << std::setfill('0');
    for (const auto& byte : data) {
        ss << std::setw(2) << static_cast<int>(byte);
    }
    return ss.str();
}

bytes hex_to_bytes(const std::string& hex) {
    bytes result;
    for (size_t i = 0; i < hex.length(); i += 2) {
        std::string byteString = hex.substr(i, 2);
        uint8_t byte = static_cast<uint8_t>(strtol(byteString.c_str(), nullptr, 16));
        result.push_back(byte);
    }
    return result;
}

bool bytes_equal(const bytes& a, const bytes& b) {
    if (a.size() != b.size()) {
        return false;
    }
    return std::equal(a.begin(), a.end(), b.begin());
}

// Constant-time comparison to prevent timing attacks
bool constant_time_compare(const bytes& a, const bytes& b) {
    if (a.size() != b.size()) {
        return false;
    }

    uint8_t result = 0;
    for (size_t i = 0; i < a.size(); ++i) {
        result |= a[i] ^ b[i];
    }
    return result == 0;
}

} // namespace qybersafe::core